}else {
print("F")
}
GPA <- 190
if(GPA>90){
print("A")
}else if (GPA <90 & GPA>80){
print("B")
}else if (GPA <80 & GPA>70){
print("C")
}else if (GPA <70 & GPA>60){
print("D")
}else {
print("F")
}
if(GPA<100 & GPA>90){
print("A")
}else if (GPA <90 & GPA>80){
print("B")
}else if (GPA <80 & GPA>70){
print("C")
}else if (GPA <70 & GPA>60){
print("D")
}else {
print("F")
}
if(GPA<100 & GPA>90){
print("A")
}else if (GPA <90 & GPA>80){
print("B")
}else if (GPA <80 & GPA>70){
print("C")
}else if (GPA <70 & GPA>60){
print("D")
}else if (GPA <50 & GPA>0){
print("D")
}else {
print("Enter correct GPA")
if(GPA<100 & GPA>90){
print("A")
}else if (GPA <90 & GPA>80){
print("B")
}else if (GPA <80 & GPA>70){
print("C")
}else if (GPA <70 & GPA>60){
print("D")
}else if (GPA <50 & GPA>0){
print("D")
}else {
print("Enter correct GPA")
}
GPA <- 190
if(GPA<100 & GPA>90){
print("A")
}else if (GPA <90 & GPA>80){
print("B")
}else if (GPA <80 & GPA>70){
print("C")
}else if (GPA <70 & GPA>60){
print("D")
}else if (GPA <50 & GPA>0){
print("D")
}else{
print("Enter correct GPA")
}
GPA <- 190
if(GPA<100 & GPA>90){
print("A")
}else if (GPA <90 & GPA>80){
print("B")
}else if (GPA <80 & GPA>70){
print("C")
}else if (GPA <70 & GPA>60){
print("D")
}else if (GPA <50 & GPA>0){
print("D")
}else{
print("Enter correct GPA")
}
if(GPA<100 & GPA>90){
print("A")
}else if (GPA <90 & GPA>80){
print("B")
}else if (GPA <80 & GPA>70){
print("C")
}else if (GPA <70 & GPA>60){
print("D")
}else if (GPA <60 & GPA>0){
print("F")
}else{
print("Enter correct GPA")
}
if(GPA<100 & GPA>90){
print("A")
}else if (GPA <90 & GPA>80){
print("B")
}else if (GPA <80 & GPA>70){
print("C")
}else if (GPA <70 & GPA>60){
print("D")
}else if (GPA <60 & GPA>0){
print("F")
}else {
print("Enter correct GPA")
}
GPA <- 78
if(GPA<100 & GPA>90){
print("A")
}else if (GPA <90 & GPA>80){
print("B")
}else if (GPA <80 & GPA>70){
print("C")
}else if (GPA <70 & GPA>60){
print("D")
}else if (GPA <60 & GPA>0){
print("F")
}else {
print("Enter correct GPA")
}
if(GPA<100 & GPA>90){
print("A")
}else if (GPA <90 & GPA>80){
print("B")
}else if (GPA <80 & GPA>70){
print("C")
}else if (GPA <70 & GPA>60){
print("D")
}else if (GPA <60 & GPA>0){
print("F")
}
if(GPA>90){
print("A")
}else if (GPA <90 & GPA>80){
print("B")
}else if (GPA <80 & GPA>70){
print("C")
}else if (GPA <70 & GPA>60){
print("D")
}else {
print("F")
}
x <- 0
x <- 0
x <- 0
x <- 0
x <- 0
x1 = 0
}
x <- 0
x1 = 0
x <- 0
s= as.integer(readline(prompt = "Enter Start num: "))
e= as.integer(readline(prompt = "Enter Start num: "))
sum=0
while(i<=e){
sum=sum+1
i=i+1
}
print(paste("Sum is ", sum))
s= as.integer(readline(prompt = "Enter Start num: "))
e= as.integer(readline(prompt = "Enter Start num: "))
i=s
sum=0
while(i<=e){
sum=sum+1
i=i+1
}
print(paste("Sum is ", sum))
print(paste("Sum is ", sum))
s= as.integer(readline(prompt = "Enter Start num: "))
i=s
sum=0
while(i<=e){
sum=sum+1
i=i+1
}
print(paste("Sum is ", sum))
s= as.integer(readline(prompt = "Enter Start num: "))
e= as.integer(readline(prompt = "Enter Start num: "))
i=s
sum=0
while(i<=e){
sum=sum+1
i=i+1
}
print(paste("Sum is ", sum))
#-------------------------------------------------------------------------
mat <- matrix(1:25, nrow = 5)
mat
for (row in 1:nrow(mat)){
for (col in 1:ncol(mat)) {
print(paste('The element at raw: ',row, 'and col: ', col, 'is ', mat[row,col]))
}
}
for (i in mat){
print(i)
}
for (row in 1:nrow(mat)){
for (col in 1:ncol(mat)) {
print(paste('The element at raw: ',row, 'and col: ', col, 'is ', mat[row,col]))
}
}
# Sample data
numeric_data <- c(10, 15, 20, 25, 30)
# Call the function to find the mean
mean_result <- find_mean(numeric_data)
print(mean_result)  # Output: 20
find_mean <- function(data) {
mean_value <- mean(data)
return(mean_value)
}
find_mean <- function(data) {
mean_value <- mean(data)
return(mean_value)
}
# Function to find the standard deviation of a numeric variable
find_sd <- function(data) {
sd_value <- sd(data)
return(sd_value)
}
# Example usage
my_data <- c(1, 2, 3, 4, 5)
mean_result <- find_mean(my_data)
sd_result <- find_sd(my_data)
# Output
print(mean_result)  # Prints the mean: 3
print(sd_result)    # Prints the standard deviation: 1.581139
mean <- function(data) {
value <- mean(data)
return(value)
}
sd <- function(data) {
value <- sd(data)
return(value)
}
mydata <- c(1, 2, 3, 4, 5)
mean_r <- mean(mydata)
mean <- function(data) {
value <- mean(data)
return(value)
}
sd <- function(data) {
value <- sd(data)
return(value)
}
mydata <- c(1, 2, 3, 4, 5)
mean_r <- mean(mydata)
sd_r <- find_sd(mydata)
print(mean_r)
print(sd_r)
mydata <- c(1, 2, 3, 4, 5)
mean_r <- mean(mydata)
print(mean_r)
mean <- function(data) {
mean_value <- mean(data)
return(mean_value)
}
sd <- function(data) {
value <- sd(data)
return(value)
}
my_data <- c(1, 2, 3, 4, 5)
mean_result <- find_mean(my_data)
mean <- function(data) {
value <- mean(data)
return(value)
}
mean <- function(data) {
value <- mean(data)
return(value)
}
sd <- function(data) {
value <- sd(data)
return(value)
}
mydata <- c(1, 2, 3, 4, 5)
mean_r <- mean(mydata)
mydata <- c(1, 2, 3, 4, 5,7)
mean_r <- mean(mydata)
sd_r <- sd(mydata)
print(mean_r)
print(sd_r)
mean <- function(data) {
value <- mean(data)
return(value)
}
sd <- function(data) {
value <- sd(data)
return(value)
}
mydata <- c(1, 2, 3, 4, 5,7)
mean_r <- mean(mydata)
print(mean_r)
mydata <- c(1, 2, 3, 4, 5,7)
mean_r <- mean(mydata)
sd_r <- sd(mydata)
mean1 <- function(data) {
value <- mean1(data)
return(value)
}
sd1 <- function(data) {
value <- sd1(data)
return(value)
}
mydata <- c(1, 2, 3, 4, 5,7)
mean_r <- mean1(mydata)
sd_r <- sd1(mydata)
print(mean_r)
print(sd_r)
mean1 <- function(data) {
value <- mean(data)
return(value)
}
sd1 <- function(data) {
value <- sd(data)
return(value)
}
mydata <- c(1, 2, 3, 4, 5,7)
mean_r <- mean(mydata)
mean1 <- function(data) {
value <- mean(data)
return(value)
}
sd1 <- function(data) {
value <- sd(data)
return(value)
}
mydata <- c(1, 2, 3, 4, 5,7)
mean_r <- mean(mydata)
mean1 <- function(data) {
value <- mean(data)
return(value)
}
sd1 <- function(data) {
value <- sd(data)
return(value)
}
data <- c(1, 2, 3, 4, 5,7)
mean_r <- mean(data)
mean1<- function(data) {
value <- mean(data)
return(value)
}
sd1<- function(data) {
value <- sd(data)
return(value)
}
mydata <- c(1, 2, 3, 4, 5,7)
mean_r <- mean1(mydata)
mean1<- function(data) {
value <- mean(data)
return(value)
}
sd1<- function(data) {
value <- sd(data)
return(value)
}
mydata <- c(1, 2, 3, 4, 5,7)
mean_r <- mean1(mydata)
myfunction=function(var1){
print(mean(var1))
print(sd(var1))
}
myfunction(c(7:9))
myfunction(c(7:9))
myfunction=function(var1){
print(mean(var1))
print(sd(var1))
}
myfunction(c(7:9))
mean1<- function(data) {
value <- mean(data)
return(value)
}
sd1<- function(data) {
value <- sd(data)
return(value)
}
mydata <- c(1, 2, 3, 4, 5,7)
mean_r <- mean1(mydata)
sd_r <- sd1(mydata)
print(mean_r)
print(sd_r)
install.packages("gifski")
library(gapminder)
# Charge libraries:
library(ggplot2)
library(gganimate)
# Make a ggplot, but add frame=year: one image per year
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, color = continent)) +
geom_point() +
scale_x_log10() +
theme_bw() +
# gganimate specific bits:
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
# Save at gif:
animate(p, renderer= gifski_renderer())
library( rgl )
library(magick)
# Let's use the iris dataset
# iris
# This is ugly
colors <- c("royalblue1", "darkcyan", "oldlace")
iris$color <- colors[ as.numeric( as.factor(iris$Species) ) ]
# Static chart
plot3d( iris[,1], iris[,2], iris[,3], col = iris$color, type = "s", radius = .2 )
# We can indicate the axis and the rotation velocity
play3d( spin3d( axis = c(0, 0, 1), rpm = 20), duration = 10 )
# Save like gif
movie3d(
movie="3dAnimatedScatterplot",
spin3d( axis = c(0, 0, 1), rpm = 7),
duration = 10,
#dir = "~/Desktop",
type = "gif",
clean = TRUE
)
library( rgl )
library(magick)
# Let's use the iris dataset
# iris
# This is ugly
colors <- c("royalblue1", "darkcyan", "oldlace")
iris$color <- colors[ as.numeric( as.factor(iris$Species) ) ]
# Static chart
plot3d( iris[,1], iris[,2], iris[,3], col = iris$color, type = "s", radius = .2 )
# We can indicate the axis and the rotation velocity
play3d( spin3d( axis = c(0, 0, 1), rpm = 20), duration = 10 )
# libraries:
library(ggplot2)
library(gganimate)
library(babynames)
install.packages("babynames")
install.packages("hrbrthemes")
# libraries:
library(ggplot2)
library(gganimate)
library(babynames)
library(hrbrthemes)
# Keep only 3 names
don <- babynames %>%
filter(name %in% c("Ashley", "Patricia", "Helen")) %>%
filter(sex=="F")
# libraries:
library(ggplot2)
library(gganimate)
library(babynames)
library(hrbrthemes)
# Keep only 3 names
don <- babynames %>%
filter(name %in% c("Ashley", "Patricia", "Helen")) %>%
filter(sex=="F")
# Plot
don %>%
ggplot( aes(x=year, y=n, group=name, color=name)) +
geom_line() +
geom_point() +
scale_color_viridis(discrete = TRUE) +
ggtitle("Popularity of American names in the previous 30 years") +
theme_ipsum() +
ylab("Number of babies born") +
transition_reveal(year)
# Save at gif:
animate(p, renderer= gifski_renderer())
install.packages("lattice")
# Library for 3D
library(lattice)
# Initiate data
b0 <- 10
b1 <- .5
b2 <- .3
int12 <- .2
g <- expand.grid(x = 1:20, y = 1:20)
g$z <- b0 + b1*g$x + b2*g$y + int12*g$x*g$y
# Make several .png images
png(file="example%03d.png", width=480, heigh=480)
for (i in seq(0, 350 ,10)){
print(wireframe(z ~ x * y, data = g,
screen = list(z = i, x = -60),
drape=TRUE))
}
dev.off()
# convert pdf to gif using ImageMagick
system("convert -delay 40 *.png animated_3D_plot.gif")
# cleaning up
file.remove(list.files(pattern=".png"))
# Library for 3D
library(lattice)
# Initiate data
b0 <- 10
b1 <- .5
b2 <- .3
int12 <- .2
g <- expand.grid(x = 1:20, y = 1:20)
g$z <- b0 + b1*g$x + b2*g$y + int12*g$x*g$y
# Make several .png images
png(file="example%03d.png", width=480, heigh=480)
for (i in seq(0, 350 ,10)){
print(wireframe(z ~ x * y, data = g,
screen = list(z = i, x = -60),
drape=TRUE))
}
dev.off()
# convert pdf to gif using ImageMagick
system("convert -delay 40 *.png animated_3D_plot.gif")
# cleaning up
file.remove(list.files(pattern=".png"))
# First with the Modified Age Data
boxplot(tested$Age~tested$Survived, notch=T, horizontal=T, ylab = "Survived",
xlab = "Age", main = "Modified Age and Survival Rate (1 = Survived)", col=c("blue", "green"))
